let Joi,User,RefreshToken,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_270‍.x([["default",()=>_270‍.o]]);_270‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_270‍.w("../../models",[["User",["User"],function(v){User=v}],["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}]]);_270‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_270‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_270‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_270‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const logincontroller = {
    async login(req,res,next){
        //validation
        const loginSchema = Joi.object({
            email:Joi.string().email().required(),
            password:Joi.string().min(3).max(30).required(),
 
        });

        const {error} = loginSchema.validate(req.body);

        _270‍.g.console.log(req.body);
        if(error){
            _270‍.g.console.log(error);
            return next(error);
        }

        try{
            const user = await User.findOne({email: req.body.email});
            if(!user){
                return next(CustomErrorHandler.wrongcredential());
            }
            // compare the password
            const match = await bcrypt.compare(req.body.password,user.password);

            if(!match){
                return next(CustomErrorHandler.wrongcredential());
            }

            const access_token = JwtService.sign({_id:user._id, role:user.role});
            const refresh_token = JwtService.sign({_id:user._id, role:user.role},'1y',REFRESH_SECRET);
            _270‍.g.console.log(access_token);
            _270‍.g.console.log(refresh_token);
            //databse save refresh token
            await RefreshToken.create({token:refresh_token});
            
            res.json({access_token:access_token,refresh_token:refresh_token});

        }catch(err){
            _270‍.g.console.log(err);
            return next(err);
        }

    },

    async logout(req,res,next){

        //validation
        const refreshSchema = Joi.object({
            refresh_token:Joi.string().required(),
 
        });

        const {error} = refreshSchema.validate(req.body);

        if(error){
            console.log('validation error');
            return next(error);
        }

        // database me se delete kar rahe refresh token
        try {
            await RefreshToken.deleteOne({token:req.body.refresh_token});
        } catch (error) {
            return next(error);
        }
        res.json({status:1});
    }
} 

_270‍.d(logincontroller);